local bnum={};bnum.undefined={1,math.huge}
function bnum.new(s,l)if s==0 or l==-math.huge then return{0,-math.huge}end;if l==math.huge then return bnum.undefined end;return{s,l}end
function bnum.isDefined(b)return b[2]~=math.huge end
function bnum.abs(b)return{math.abs(b[1]),b[2]}end
function bnum.add(a,b)if not bnum.isDefined(a)or not bnum.isDefined(b)then return bnum.undefined end;if a[1]==0 then return b end;if b[1]==0 then return a end;local x,y=a[2],b[2]local sa,sb=a[1],b[1]if x<y then x,y=y,x;sa,sb=sb,sa end;local diff=y-x;if diff<-320 then return{sa,x}end;if sa==sb then return bnum.new(sa,x+math.log10(1+10^(diff)))else local v=1-10^(diff)if v==0 then return{0,-math.huge}end;local s=sa;if v<0 then s=-s;v=-v end;return bnum.new(s,x+math.log10(v))end end
function bnum.sub(a,b)return bnum.add(a,{-b[1],b[2]})end
function bnum.mul(a,b)if not bnum.isDefined(a)or not bnum.isDefined(b)then return bnum.undefined end;if a[1]==0 or b[1]==0 then return{0,-math.huge}end;return bnum.new(a[1]*b[1],a[2]+b[2])end
function bnum.div(a,b)if not bnum.isDefined(a)or not bnum.isDefined(b)or b[1]==0 then return bnum.undefined end;if a[1]==0 then return{0,-math.huge}end;return bnum.new(a[1]*b[1],a[2]-b[2])end
local L10E=math.log10(math.exp(1))local L10_2=math.log10(2)
function bnum.exp(b)if not bnum.isDefined(b)then return bnum.undefined end;if b[1]==0 then return{1,0}end;local v=b[1]*10^b[2]return bnum.new(1,v*L10E)end
function bnum.pow(a,b)if not bnum.isDefined(a)or not bnum.isDefined(b)then return bnum.undefined end;if a[1]==0 then return{0,-math.huge}end;if b[1]==0 then return{1,0}end;local e=b[1]*10^b[2]if a[1]==-1 then if math.abs(e-math.floor(e+0.5))>1e-12 then return bnum.undefined end end;local s=1;if a[1]==-1 then if math.floor(e)%2==1 then s=-1 end else s=a[1]end;return bnum.new(s,a[2]*e)end
function bnum.ldexp(m,e)if not bnum.isDefined(m)or not bnum.isDefined(e)then return bnum.undefined end;if e[1]==0 then return m end;local el=e[2]*L10_2;if m[1]==-1 then local ev=10^e[2]if math.abs(ev-math.floor(ev+0.5))>1e-12 then return bnum.undefined end end;return bnum.new(m[1],m[2]+el)end
local function trim(s)return s:gsub("(%.?0+)$","")end
function bnum.tostring(b)if not bnum.isDefined(b)then if b[1]==1 then return"Infinity"elseif b[1]==-1 then return"-Infinity"end elseif b[1]~=b[1]or b[2]~=b[2]then return"NaN"end;if b[1]==0 then return"0"end;local ss=(b[1]<0)and"-"or""local lv=b[2]local function fe(n)return string.format("%+d",math.floor(n))end;local dmin=-(2^53-1)local dmax=2^53-1;local e=math.floor(lv)local m=10^(lv-e)local ms=trim(string.format("%.10f",m))if e<-6 or e>12 then if e>=dmin and e<=dmax then return string.format("%s%se%s",ss,ms,fe(e))else local ae=math.abs(e)local ee=math.floor(math.log10(ae))local em=e/(10^ee)local ems=trim(string.format("%.10f",em))return string.format("%s%se%s%se%s",ss,ms,(e>=0)and"+"or"",ems,fe(ee))end else local v=b[1]*10^lv;return tostring(v)end end
function bnum.tonumber(b)if not bnum.isDefined(b)then return nil end;if b[1]==0 then return 0 end;return b[1]*10^b[2]end
function bnum.fromstring(s)if s==nil then return bnum.undefined end;s=s:match("^%s*(.-)%s*$")if s=="0"then return{0,-math.huge}end;if s=="undefined"then return bnum.undefined end;local si=1;if s:sub(1,1)=="-"then si=-1;s=s:sub(2)elseif s:sub(1,1)=="+"then s=s:sub(2)end;local m,e1,e2=s:match("^(.-)[eE]([+-]?%d+)[eE]([+-]?%d+)$")if m and e1 and e2 then local mm=tonumber(m)local ee1=tonumber(e1)local ee2=tonumber(e2)if not mm or not ee1 or not ee2 then return bnum.undefined end;if mm==0 then return{0,-math.huge}end;return{si,math.log10(math.abs(mm))+ee1*(10^ee2)}end;local m2,ep=s:match("^(.-)[eE]([+-]?%d+)$")if m2 and ep then local mm=tonumber(m2)local ee=tonumber(ep)if not mm or not ee then return bnum.undefined end;if mm==0 then return{0,-math.huge}end;return{si,math.log10(math.abs(mm))+ee}end;local n=tonumber(s)if not n then return bnum.undefined end;if n==0 then return{0,-math.huge}end;return{si,math.log10(math.abs(n))}end
function bnum.fromnumber(n)if type(n)~="number"then return bnum.undefined end;if n==0 then return{0,-math.huge}end;return(n<0)and{-1,math.log10(-n)}or{1,math.log10(n)}end
function bnum.floor(b)if not bnum.isDefined(b)then return bnum.undefined end;if b[1]==0 then return{0,-math.huge}end;local s,l=b[1],b[2]local il=math.floor(l)local ml=l-il;local mi=math.floor(10^ml)if s>0 then return{1,math.log10(mi*10^il)}else local cm=mi;local cl=il;if(10^ml)>mi then cm=mi+1;if cm==10 then cm=1;cl=il+1 end end;return{-1,math.log10(cm*10^cl)}end end
function bnum.ceil(b)if not bnum.isDefined(b)then return bnum.undefined end;if b[1]==0 then return{0,-math.huge}end;local s,l=b[1],b[2]local il=math.floor(l)local ml=l-il;local mv=10^ml;local mi=math.floor(mv)local cm=mi;local cl=il;if mv>mi then cm=mi+1;if cm==10 then cm=1;cl=il+1 end end;if s>0 then return{1,math.log10(cm*10^cl)}else return{-1,math.log10(mi*10^il)}end end
function bnum.round(b)if not bnum.isDefined(b)then return bnum.undefined end;if b[1]==0 then return{0,-math.huge}end;local s,l=b[1],b[2]local il=math.floor(l)local ml=l-il;local mv=10^ml;local mi=math.floor(mv)local fv=mi*10^il;local cm=mi;local cl=il;if mv>mi then cm=mi+1;if cm==10 then cm=1;cl=il+1 end end;local cv=cm*10^cl;local mv2=(fv+cv)/2;local bv=s*10^l;if bv>=mv2 then if s>0 then return{1,math.log10(cv)}else return{-1,math.log10(fv)}end else if s>0 then return{1,math.log10(fv)}else return{-1,math.log10(cv)}end end end
function bnum.mod(a,b)if not bnum.isDefined(a)or not bnum.isDefined(b)or b[1]==0 then return bnum.undefined end;if a[1]==0 then return{0,-math.huge}end;local q=bnum.div(a,b)local qf=bnum.floor(q)local p=bnum.mul(qf,b)local r=bnum.sub(a,p)if r[1]~=0 and r[1]~=b[1]then r=bnum.add(r,b)end;return r end
function bnum.log10(b)if not bnum.isDefined(b)or b[1]<=0 then return bnum.undefined end;return bnum.fromnumber(b[2])end
function bnum.ln(b)if not bnum.isDefined(b)or b[1]<=0 then return bnum.undefined end;return bnum.fromnumber(b[2]*math.log(10))end
function bnum.log(bb,bi)if not bnum.isDefined(bb)or not bnum.isDefined(bi)then return bnum.undefined end;if bb[1]<=0 or bi[1]<=0 then return bnum.undefined end;if bb[2]==0 then return bnum.undefined end;return bnum.fromnumber(bi[2]/bb[2])end
return bnum
